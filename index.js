#!/usr/bin/env node

import {NlpManager} from 'node-nlp';
import {Command} from 'commander';
import chalk from 'chalk';

// Configura√ß√µes e constantes
const EMOJIS_SENTIMENTO = {
	'positive': 'üòÑ',
	'negative': 'üò†',
	'neutral': 'üòê'
};

// Fun√ß√£o para silenciar logs temporariamente (para fun√ß√µes ass√≠ncronas)
async function silenciarLogsAsync(asyncCallback) {
	const originalLog = console.log;
	console.log = () => {}; // desativa logs
	const result = await asyncCallback();
	console.log = originalLog; // ativa logs novamente
	return result;
}

// Fun√ß√£o para criar e configurar o manager NLP
function criarNlpManager() {
	return new NlpManager({ languages: ['pt'] });
}

// Fun√ß√£o para treinar o modelo
async function treinarModelo(manager, frase) {
	manager.addDocument('pt', frase, 'sentimento.analisar');
	await silenciarLogsAsync(() => manager.train(false));
}

// Fun√ß√£o para analisar sentimento
async function analisarSentimento(frase) {
	console.log(chalk.yellow('Analisando... Aguarde üß†'));
	
	const manager = criarNlpManager();
	await treinarModelo(manager, frase);
	
	const result = await manager.process('pt', frase);
	return result.sentiment.vote;
}

// Fun√ß√£o para exibir resultado
function exibirResultado(sentimento) {
	console.log(chalk.green('Resultado:'));
	console.log(EMOJIS_SENTIMENTO[sentimento]);
}

// Configura√ß√£o do programa CLI
const program = new Command();

program
  .name('sentimento')
  .description('An√°lise de sentimento em portugu√™s')
  .argument('<frase>', 'Frase a ser analisada')
  .action(async (frase) => {
	try {
		const sentimento = await analisarSentimento(frase);
		exibirResultado(sentimento);
	} catch (error) {
		console.error(chalk.red('Erro ao analisar sentimento:'), error.message);
		process.exit(1);
	}
  });

  program.parse();


  // pra depois rsrs https://api.github.com/emojis